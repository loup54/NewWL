
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Checkbox } from '@/components/ui/checkbox';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { FileTemplate, Plus, Edit3, Trash2, Copy } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface ExportTemplate {
  id: string;
  name: string;
  description: string;
  format: 'pdf' | 'word' | 'excel' | 'csv';
  includeAnalytics: boolean;
  includeCharts: boolean;
  includeComparison: boolean;
  includeRawData: boolean;
  customHeader: string;
  customFooter: string;
  createdAt: Date;
}

export const ExportTemplates: React.FC = () => {
  const { toast } = useToast();
  const [templates, setTemplates] = useState<ExportTemplate[]>([
    {
      id: '1',
      name: 'Standard Report',
      description: 'Basic analysis report with keyword highlights',
      format: 'pdf',
      includeAnalytics: true,
      includeCharts: false,
      includeComparison: false,
      includeRawData: false,
      customHeader: 'Document Analysis Report',
      customFooter: 'Generated by WordLens',
      createdAt: new Date()
    },
    {
      id: '2',
      name: 'Executive Summary',
      description: 'High-level overview with charts and analytics',
      format: 'pdf',
      includeAnalytics: true,
      includeCharts: true,
      includeComparison: true,
      includeRawData: false,
      customHeader: 'Executive Analysis Summary',
      customFooter: 'Confidential Report',
      createdAt: new Date()
    }
  ]);
  
  const [isCreating, setIsCreating] = useState(false);
  const [editingTemplate, setEditingTemplate] = useState<ExportTemplate | null>(null);
  const [newTemplate, setNewTemplate] = useState<Partial<ExportTemplate>>({
    name: '',
    description: '',
    format: 'pdf',
    includeAnalytics: true,
    includeCharts: false,
    includeComparison: false,
    includeRawData: false,
    customHeader: '',
    customFooter: ''
  });

  const handleCreateTemplate = () => {
    if (!newTemplate.name) {
      toast({
        title: "Error",
        description: "Please enter a template name",
        variant: "destructive"
      });
      return;
    }

    const template: ExportTemplate = {
      id: Date.now().toString(),
      name: newTemplate.name,
      description: newTemplate.description || '',
      format: newTemplate.format || 'pdf',
      includeAnalytics: newTemplate.includeAnalytics || false,
      includeCharts: newTemplate.includeCharts || false,
      includeComparison: newTemplate.includeComparison || false,
      includeRawData: newTemplate.includeRawData || false,
      customHeader: newTemplate.customHeader || '',
      customFooter: newTemplate.customFooter || '',
      createdAt: new Date()
    };

    setTemplates(prev => [...prev, template]);
    setNewTemplate({
      name: '',
      description: '',
      format: 'pdf',
      includeAnalytics: true,
      includeCharts: false,
      includeComparison: false,
      includeRawData: false,
      customHeader: '',
      customFooter: ''
    });
    setIsCreating(false);

    toast({
      title: "Template Created",
      description: `Export template "${template.name}" has been created successfully.`
    });
  };

  const handleUpdateTemplate = () => {
    if (!editingTemplate) return;

    setTemplates(prev => prev.map(template => 
      template.id === editingTemplate.id ? editingTemplate : template
    ));
    setEditingTemplate(null);

    toast({
      title: "Template Updated",
      description: "Export template has been updated successfully."
    });
  };

  const duplicateTemplate = (template: ExportTemplate) => {
    const duplicate: ExportTemplate = {
      ...template,
      id: Date.now().toString(),
      name: `${template.name} (Copy)`,
      createdAt: new Date()
    };

    setTemplates(prev => [...prev, duplicate]);
    
    toast({
      title: "Template Duplicated",
      description: `Created a copy of "${template.name}".`
    });
  };

  const deleteTemplate = (id: string) => {
    setTemplates(prev => prev.filter(template => template.id !== id));
    toast({
      title: "Template Deleted",
      description: "Export template has been deleted."
    });
  };

  const TemplateForm = ({ 
    template, 
    onSave, 
    onCancel 
  }: { 
    template: Partial<ExportTemplate>; 
    onSave: () => void; 
    onCancel: () => void; 
  }) => (
    <div className="space-y-4">
      <div className="grid grid-cols-2 gap-4">
        <div className="space-y-2">
          <Label htmlFor="template-name">Template Name</Label>
          <Input
            id="template-name"
            placeholder="e.g., Monthly Report"
            value={template.name || ''}
            onChange={(e) => {
              if (editingTemplate) {
                setEditingTemplate(prev => prev ? { ...prev, name: e.target.value } : null);
              } else {
                setNewTemplate(prev => ({ ...prev, name: e.target.value }));
              }
            }}
          />
        </div>
        <div className="space-y-2">
          <Label htmlFor="format">Export Format</Label>
          <Select 
            value={template.format} 
            onValueChange={(value: 'pdf' | 'word' | 'excel' | 'csv') => {
              if (editingTemplate) {
                setEditingTemplate(prev => prev ? { ...prev, format: value } : null);
              } else {
                setNewTemplate(prev => ({ ...prev, format: value }));
              }
            }}
          >
            <SelectTrigger>
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="pdf">PDF Report</SelectItem>
              <SelectItem value="word">Word Document</SelectItem>
              <SelectItem value="excel">Excel Spreadsheet</SelectItem>
              <SelectItem value="csv">CSV File</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>

      <div className="space-y-2">
        <Label htmlFor="description">Description</Label>
        <Textarea
          id="description"
          placeholder="Describe this template..."
          value={template.description || ''}
          onChange={(e) => {
            if (editingTemplate) {
              setEditingTemplate(prev => prev ? { ...prev, description: e.target.value } : null);
            } else {
              setNewTemplate(prev => ({ ...prev, description: e.target.value }));
            }
          }}
        />
      </div>

      <div className="space-y-3">
        <Label>Include in Export</Label>
        <div className="grid grid-cols-2 gap-3">
          <div className="flex items-center space-x-2">
            <Checkbox
              id="include-analytics"
              checked={template.includeAnalytics}
              onCheckedChange={(checked) => {
                if (editingTemplate) {
                  setEditingTemplate(prev => prev ? { ...prev, includeAnalytics: !!checked } : null);
                } else {
                  setNewTemplate(prev => ({ ...prev, includeAnalytics: !!checked }));
                }
              }}
            />
            <Label htmlFor="include-analytics">Analytics Dashboard</Label>
          </div>
          <div className="flex items-center space-x-2">
            <Checkbox
              id="include-charts"
              checked={template.includeCharts}
              onCheckedChange={(checked) => {
                if (editingTemplate) {
                  setEditingTemplate(prev => prev ? { ...prev, includeCharts: !!checked } : null);
                } else {
                  setNewTemplate(prev => ({ ...prev, includeCharts: !!checked }));
                }
              }}
            />
            <Label htmlFor="include-charts">Charts & Graphs</Label>
          </div>
          <div className="flex items-center space-x-2">
            <Checkbox
              id="include-comparison"
              checked={template.includeComparison}
              onCheckedChange={(checked) => {
                if (editingTemplate) {
                  setEditingTemplate(prev => prev ? { ...prev, includeComparison: !!checked } : null);
                } else {
                  setNewTemplate(prev => ({ ...prev, includeComparison: !!checked }));
                }
              }}
            />
            <Label htmlFor="include-comparison">Document Comparison</Label>
          </div>
          <div className="flex items-center space-x-2">
            <Checkbox
              id="include-raw-data"
              checked={template.includeRawData}
              onCheckedChange={(checked) => {
                if (editingTemplate) {
                  setEditingTemplate(prev => prev ? { ...prev, includeRawData: !!checked } : null);
                } else {
                  setNewTemplate(prev => ({ ...prev, includeRawData: !!checked }));
                }
              }}
            />
            <Label htmlFor="include-raw-data">Raw Data</Label>
          </div>
        </div>
      </div>

      <div className="grid grid-cols-2 gap-4">
        <div className="space-y-2">
          <Label htmlFor="custom-header">Custom Header</Label>
          <Input
            id="custom-header"
            placeholder="Report header text..."
            value={template.customHeader || ''}
            onChange={(e) => {
              if (editingTemplate) {
                setEditingTemplate(prev => prev ? { ...prev, customHeader: e.target.value } : null);
              } else {
                setNewTemplate(prev => ({ ...prev, customHeader: e.target.value }));
              }
            }}
          />
        </div>
        <div className="space-y-2">
          <Label htmlFor="custom-footer">Custom Footer</Label>
          <Input
            id="custom-footer"
            placeholder="Report footer text..."
            value={template.customFooter || ''}
            onChange={(e) => {
              if (editingTemplate) {
                setEditingTemplate(prev => prev ? { ...prev, customFooter: e.target.value } : null);
              } else {
                setNewTemplate(prev => ({ ...prev, customFooter: e.target.value }));
              }
            }}
          />
        </div>
      </div>

      <div className="flex gap-2">
        <Button onClick={onSave}>
          {editingTemplate ? 'Update Template' : 'Create Template'}
        </Button>
        <Button variant="outline" onClick={onCancel}>Cancel</Button>
      </div>
    </div>
  );

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold">Export Templates</h2>
          <p className="text-muted-foreground">Create reusable export configurations</p>
        </div>
        <Button onClick={() => setIsCreating(true)} className="flex items-center gap-2">
          <Plus className="h-4 w-4" />
          New Template
        </Button>
      </div>

      {isCreating && (
        <Card>
          <CardHeader>
            <CardTitle>Create Export Template</CardTitle>
            <CardDescription>Define a reusable export configuration</CardDescription>
          </CardHeader>
          <CardContent>
            <TemplateForm
              template={newTemplate}
              onSave={handleCreateTemplate}
              onCancel={() => setIsCreating(false)}
            />
          </CardContent>
        </Card>
      )}

      <div className="grid gap-4">
        {templates.map(template => (
          <Card key={template.id}>
            <CardContent className="py-4">
              <div className="flex items-start justify-between">
                <div className="flex items-start gap-3">
                  <FileTemplate className="h-5 w-5 text-muted-foreground mt-0.5" />
                  <div>
                    <h3 className="font-medium">{template.name}</h3>
                    <p className="text-sm text-muted-foreground">{template.description}</p>
                    <div className="flex items-center gap-4 mt-2 text-xs text-muted-foreground">
                      <span>Format: {template.format.toUpperCase()}</span>
                      <span>Created: {template.createdAt.toLocaleDateString()}</span>
                    </div>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <Dialog>
                    <DialogTrigger asChild>
                      <Button variant="outline" size="sm">
                        <Edit3 className="h-4 w-4" />
                      </Button>
                    </DialogTrigger>
                    <DialogContent className="max-w-2xl">
                      <DialogHeader>
                        <DialogTitle>Edit Template</DialogTitle>
                        <DialogDescription>
                          Modify the export template configuration
                        </DialogDescription>
                      </DialogHeader>
                      <TemplateForm
                        template={editingTemplate || template}
                        onSave={handleUpdateTemplate}
                        onCancel={() => setEditingTemplate(null)}
                      />
                    </DialogContent>
                  </Dialog>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => duplicateTemplate(template)}
                  >
                    <Copy className="h-4 w-4" />
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => deleteTemplate(template.id)}
                  >
                    <Trash2 className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
};
